#Дашкевич П, Э-1941
#распознование рукописных чисел


# установим и запустим библиотеки
install.packages('devtools')
library('devtools')
devtools::install_github("rstudio/tensorflow")
devtools::install_github("rstudio/keras")
install.packages('tensorflow')
install.packages('keras')
library('keras')
library('tensorflow')

# установим Keras
install_keras()

# загрузким данные
mnist <- dataset_mnist()

# разделим массив на 4 части
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y

# построим структуру сети
network<- keras_model_sequential() %>%
layer_dense(units = 512, activation = 'relu', input_shape = c(28*28)) %>%
layer_dense(units = 10, activation = 'softmax')

# добавим функцию потерь и точность
network %>% compile(optimizer = 'rmsprop',loss = 'categorical_crossentropy', metrics = c('accuracy'))

# преобразуем к необходимой размерности
train_images<-array_reshape(train_images, c(60000, 28*28)) 
train_images<-train_images/255 

# меняем размерность тестовой выборки и область значений
test_images<-array_reshape(test_images, c(10000, 28*28))
test_images<-test_images/255

# создадим категории для ярлыков
train_labels<-to_categorical(train_labels)
test_labels<-to_categorical(test_labels)

# тренеруем сеть
network %>% fit(train_images, train_labels, epochs = 35, batch_size = 128)

# определеим точность модели по тестовой выборке
metric <- network %>% evaluate(test_images, test_labels)
metric

# предскажем значения для первых 100 и последних 100 элементов
pred_fi <- network %>% predict_classes(test_images[1:100,])
pred_la <- network %>% predict_classes(test_images[9901:10000,])

# сравним реальные значения с предсказанными
test_labels1 <- mnist$test$y
test_labels1[9901:10000]


# обучение сетей с добавлением валидации (появляется интерактивны график с точками каждой эпохи)
history <- network %>% fit(train_images, train_labels,epochs = 5, batch_size = 128, validation_split = 0.2)

# точечный график процесса обучения
plot(history)

# нарисуем картинку числа из массива
a <- mnist$test$x[8, 1:28, 1:28]
image(as.matrix(a))

# предскажим одно число из массива
test_a <- array_reshape(a, c(1, 28*28))
test_a <- test_a/255
network %>% predict_classes(test_a)
